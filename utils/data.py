# utils/data.py
import pandas as pd

def load_educational_data():
    """
    Load educational data for strategies and Bloom's taxonomy.
    
    Returns:
        tuple: (strategies_df, blooms_df) - Pandas DataFrames with educational data
    """
    # Strategies for different lesson phases
    strategies_df = pd.DataFrame({
        'Starter': [
            "Show an image related to the topic and ask students to describe what they see.",
            "Use a mnemonic to help students remember key vocabulary words.",
            "Have students act out a key concept using gestures (Total Physical Response).",
            "Use real objects or pictures to introduce the vocabulary in context.",
            "Ask a thought-provoking question to activate prior knowledge."
        ],
        'Instruction': [
            "Use word mapping: Define, give examples, and create connections.",
            "Use sentence frames: Students complete structured sentences using new words.",
            "Create a comic strip incorporating key vocabulary in context.",
            "Collaborative storytelling: Each student adds a sentence using a target word.",
            "Read a short, engaging passage and ask students to identify key vocabulary words."
        ],
        'Assessment': [
            "Quickfire Q&A: Students explain a word in pairs in 30 seconds.",
            "Exit Ticket: Students write a sentence using a key word.",
            "Create a mind map linking words to related concepts.",
            "Match words with definitions in a timed challenge.",
            "Fill-in-the-blank using words from the lesson."
        ],
        'Dialogic': [
            "Turn & Talk: In pairs, students explain a word in their own words.",
            "Think-Pair-Share: Discuss how they'd use the word in real life.",
            "Role-play: Students use key words in a real-world scenario.",
            "Socratic questioning and Socratic circles: Encourage discussion and critical thinking.",
            "Pose-pause-bounce-pounce: Build on peer ideas collaboratively."
        ],
        'Consolidation': [
            "Summarize the lesson in three key words and explain why.",
            "Draw a picture representing the meaning of a key word.",
            "Word Ladder: Change one letter at a time to form new words.",
            "Vocabulary Bingo: Call definitions, students mark words.",
            "Create a KWL Chart (What I Know, What I Want to Know, What I Learned)."
        ]
    })
    
    # Bloom's Taxonomy levels, descriptions, question stems, and response frames
    blooms_df = pd.DataFrame({
        'Level': ['REMEMBER', 'UNDERSTAND', 'APPLY', 'ANALYZE', 'CREATE', 'EVALUATE'],
        'Description': [
            'Recall facts and basic concepts',
            'Explain ideas or concepts',
            'Use information in new situations',
            'Draw connections among ideas',
            'Produce new or original work',
            'Justify a stand or decision'
        ],
        'Question_Stems': [
            'What is...? Where is...? When did...? What would you find...?',
            'How would you explain...? What does this mean...? Can you give an example of...?',
            'How would you use...? How would you solve...? What would happen if...?',
            'Why did this happen...? What evidence shows...? How are these different...?',
            'How could you make...? What would you design...? How could you adapt...?',
            'Do you think this is good...? What would you choose...? Why is this method best...?'
        ],
        'Response_Frames': [
            'It is... You would find this in/at...',
            'I can explain this by... This means that...',
            'I would use this by... To solve this I would...',
            'This happened because... The evidence is... ___ is different from ___ because...',
            'I could make this by... I would design ___ with...',
            'I think this is good/bad because... I would choose ___ because...'
        ]
    })
    
    return strategies_df, blooms_df

def save_to_history(session_state, tool_name, inputs, result):
    """
    Save a tool usage to the history in session state.
    
    Args:
        session_state: The Streamlit session state
        tool_name (str): Name of the tool used
        inputs (dict): Dictionary of user inputs
        result (str): Result generated by the tool
    """
    from datetime import datetime
    
    history_item = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "tool": tool_name,
        "inputs": inputs,
        "result": result
    }
    session_state['history'].insert(0, history_item)  # Add to the beginning

def get_history_json(session_state):
    """
    Get the history as a JSON string.
    
    Args:
        session_state: The Streamlit session state
        
    Returns:
        str: JSON string of the history
    """
    import json
    return json.dumps(session_state['history'], indent=2)
